/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.helper;

import com.mobcent.discuz.android.constant.ConfigConstant;
import android.content.Context;
import com.mobcent.discuz.android.model.ConfigModuleModel;
import com.mobcent.lowest.base.utils.MCResource;
import java.util.ArrayList;
import java.util.List;
import com.mobcent.discuz.android.model.ConfigComponentModel;
import com.mobcent.discuz.android.model.ConfigNavModel;
import android.text.TextUtils;
import com.mobcent.discuz.android.db.SharedPreferencesDB;
import java.util.Map;
import com.mobcent.lowest.base.utils.MCListUtils;
import java.util.Iterator;

public class ConfigOptHelper implements ConfigConstant {
    public static boolean isAutoShowConfigSwitch;
    
    public static boolean navContainOnly(ConfigModuleModel moduleModel, String matchingType) {
        List<ConfigComponentModel> componentList = getComponentList();
        if(!MCListUtils.isEmpty(componentList)) {
            int count = componentList.size();
            return ((count == 0x1) && (matchingType.equals((ConfigComponentModel)componentList.get(0x0).getType())));
        }
        return false;
    }
    
    public static boolean navContainMore(ConfigModuleModel moduleModel, String matchingType) {
        List<ConfigComponentModel> componentList = getComponentList();
        if(!MCListUtils.isEmpty(componentList)) {
            int count = componentList.size();
            for(int i = 0x0; i < count; i = i + 0x1) {
                String type = (ConfigComponentModel)componentList.get(i).getType();
                if(matchingType.equals(type)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public static void isNavContainDiscover(Map<Long, ConfigModuleModel> moduleMap, List<ConfigNavModel> navList) {
        if((!MCListUtils.isEmpty(navList)) && (moduleMap != null)) {
            for(ConfigNavModel navModel : navList) {
                ConfigModuleModel moduleModel = (ConfigModuleModel)get(Long.valueOf(navModel.getModuleId()));
                if(moduleModel != null) {
                    boolean isContain = navContainMore(moduleModel, "discover");
                    if(isContain) {
                        return 0x1;
                    }
                }
            }
        }
        return null;
    }
    
    public static ConfigNavModel createPlazaNavModel(Context context) {
        ConfigNavModel navModel = new ConfigNavModel();
        navModel.setIcon("mc_forum_main_bar_button5");
        navModel.setTitle(MCResource.getInstance(context).getString("mc_forum_home_discover"));
        navModel.setModuleId(0xffffffff);
        return navModel;
    }
    
    public static ConfigModuleModel createPlazaModuleModel(Context context) {
        ConfigModuleModel configModuleModel = new ConfigModuleModel();
        configModuleModel.setId(0xffffffff);
        configModuleModel.setType("full");
        configModuleModel.setIcon("mc_forum_main_bar_button5");
        configModuleModel.setTitle(MCResource.getInstance(context).getString("mc_forum_home_discover"));
        ArrayList<ConfigComponentModel> componentModels = new ArrayList<ConfigComponentModel>();
        ConfigComponentModel componentModel = new ConfigComponentModel();
        componentModel.setType("discover");
        componentModels.add(componentModel);
        configModuleModel.setComponentList(componentModels);
        return configModuleModel;
    }
    
    public static boolean isNeedLogin(ConfigModuleModel moduleModel) {
        return (moduleModel == null);
        return (MCListUtils.isEmpty(getComponentList()));
        if(!"full".equals(getType())) {
            return false;
        }
        for(int i = 0x0, len = getComponentList().size(); i < len; i = i + 0x1) {
            List<ConfigComponentModel> componentList = getComponentList();
            if(MCListUtils.isEmpty(componentList)) {
            }
            for(int j = 0x0, size = componentList.size(); j < size; j = j + 0x1) {
                ConfigComponentModel componentModel = (ConfigComponentModel)componentList.get(i);
                boolean isNeedLogin = isNeedLogin(componentModel.getType());
                if(isNeedLogin) {
                    return isNeedLogin;
                }
            }
            return false;
        }
        // Parsing error may occure here :(
    }
    
    public static boolean isNeedLogin(ConfigComponentModel componentModel) {
        boolean isNeedLogin = 0x0;
        if(componentModel != null) {
            isNeedLogin = isNeedLogin(getType());
        }
        return isNeedLogin;
    }
    
    public static boolean isNeedLogin(String type) {
        if(TextUtils.isEmpty(type)) {
            return false;
        }
        if(("messagelist".equals(type)) || ("userinfo".equals(type)) || ("userlist".equals(type)) || ("fastaudio".equals(type)) || ("fastcamera".equals(type)) || ("fastimage".equals(type)) || ("fasttext".equals(type)) || ("sign".equals(type))) {
            return true;
        }
        return false;
    }
    
    public static long getConfigId(Context context) {
        long customConfigId = 0x0;
        String configStr = MCResource.getInstance(context).getString("mc_custom_config_id");
        if(!TextUtils.isEmpty(configStr)) {
            try {
                customConfigId = Long.parseLong(configStr);
            } catch(Exception localException1) {
            }
        }
        if(customConfigId >= 0x0) {
            return customConfigId;
        }
        long tempCustomConfigId = SharedPreferencesDB.getInstance(context).getLong("customConfigId");
        if(tempCustomConfigId == 0x0) {
            isAutoShowConfigSwitch = 0x1;
            SharedPreferencesDB.getInstance(context).saveLong("configId", (0xffffffff ^ customConfigId));
        } else {
            isAutoShowConfigSwitch = 0x0;
        }
        SharedPreferencesDB.getInstance(context).saveLong("customConfigId", customConfigId);
        return configIdSDB;
        return customConfigId;
    }
}
