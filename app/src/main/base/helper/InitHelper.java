/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.helper;

import android.content.Context;
import com.mobcent.discuz.android.db.SharedPreferencesDB;
import com.mobcent.lowest.base.utils.MCResource;
import android.app.Activity;
import android.content.Intent;
import com.mobcent.lowest.base.utils.MCAppUtil;
import android.os.Parcelable;
import com.mobcent.discuz.android.model.UriSkipModel;
import com.mobcent.discuz.activity.HomeActivity;
import com.mobcent.discuz.android.service.impl.UserServiceImpl;
import com.mobcent.discuz.android.service.UserService;
import com.mobcent.discuz.android.db.UserDBUtil;
import com.mobcent.discuz.android.model.UserInfoModel;
import android.text.TextUtils;
import android.os.Handler;
import com.mobcent.discuz.base.task.RequestCalback;
import com.mobcent.discuz.android.model.BaseResultModel;
import com.mobcent.discuz.android.model.ConfigModel;
import com.mobcent.discuz.base.task.ConfigTask;

public class InitHelper {
    private Context context;
    private SharedPreferencesDB db;
    private static InitHelper initHelper;
    private MCResource resource;
    public String TAG = "InitHelper";
    
    private InitHelper(Context context) {
        resource = MCResource.getInstance(context.getApplicationContext());
        db = SharedPreferencesDB.getInstance(context.getApplicationContext());
        context = context;
    }
    
    public static synchronized InitHelper getInstance(Context context) {
        if(initHelper == null) {
            initHelper = new InitHelper(getApplicationContext());
        }
    }
    return initHelper;
}

public void init(Context context, long configId, boolean getAllDataByNet, RequestCalback<BaseResultModel<ConfigModel>> p4) {
    ConfigTask configTask = new ConfigTask(context, configId, getAllDataByNet, getAllDataByNet);
    configTask.execute(new Void[0x0]);
}

public void dispatchActivity(Activity activity, String skipToWhere, UriSkipModel skipModel) {
    if("homeSkip".equals(skipToWhere)) {
        defaultSkip(activity, skipModel);
    } else if("homeSkipToSession".equals(skipToWhere)) {
        Intent intent = new Intent(activity, HomeActivity.class);
        intent.putExtra("homeSkipToWhere", "homeSkipToSession");
        intent.putExtra("skipToHomeMsg", true);
        activity.startActivity(intent);
        activity.finish();
    } else if(!"homeSkipToChat".equals(skipToWhere)) {
        defaultSkip(activity, skipModel);
    }
    new Handler().postDelayed(new InitHelper.1(this, activity), 0x12c);
}

private void defaultSkip(Activity activity, UriSkipModel skipModel) {
    if(!db.getShortCutFlag()) {
        db.setShortCutFlag(true);
        addShortcut(activity);
    }
    doLoginAsync();
    Intent intent = new Intent(activity, HomeActivity.class);
    intent.putExtra("skipUriModel", skipModel);
    activity.startActivity(intent);
    activity.finish();
}

private void addShortcut(Activity activity) {
    Intent shortcut = new Intent("com.android.launcher.action.INSTALL_SHORTCUT");
    shortcut.putExtra("android.intent.extra.shortcut.NAME", MCAppUtil.getAppName(activity.getApplicationContext()));
    shortcut.putExtra("duplicate", false);
    shortcut.putExtra("android.intent.extra.shortcut.NAME", MCAppUtil.getAppName(activity.getApplicationContext()));
    
    shortcutIntent.setClassName(activity, activity.getClass().getName());
    shortcut.putExtra("android.intent.extra.shortcut.INTENT", shortcutIntent);
    try {
        Intent.ShortcutIconResource iconRes = Intent.ShortcutIconResource.fromContext(activity, resource.getDrawableId("app_icon128"));
        shortcut.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", iconRes);
        activity.sendBroadcast(shortcut);
        return;
    } catch(Exception localException1) {
    }
}

private void doLoginAsync() {
    new Thread(this) {
        
        public void run() {
        }
    }.start();
}

private void doLoginSync() {
    UserServiceImpl userService = new UserServiceImpl(context);
    if(!userService.isLogin()) {
        return;
    }
    UserInfoModel userInfoModel = UserDBUtil.getInstance(context).getCurrUser(db.getUserId());
    if(userInfoModel != null) {
        String userName = userInfoModel.getNickname();
        String passWord = userInfoModel.getPwd();
        if((!TextUtils.isEmpty(userName)) && (TextUtils.isEmpty(passWord))) {
            String userName = "MOBCENT@hacker#007";
            String passWord = "MOBCENT@hacker#007";
        }
        userService.loginUser(userName, this, "", "", "login", false);
    }
}
}
