/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.mobcent.discuz.base.activity;

import android.support.v4.app.FragmentActivity;
import com.mobcent.discuz.base.helper.TopBarOptImpl;
import com.mobcent.discuz.base.constant.BaseIntentConstant;
import com.mobcent.lowest.android.ui.utils.MCTouchSlidHelper;
import com.mobcent.lowest.android.ui.widget.actionbar.MCActionBarHelper;
import android.os.Bundle;
import com.mobcent.discuz.base.helper.FragmentOptHelper;
import android.view.inputmethod.InputMethodManager;
import com.mobcent.discuz.android.model.PermissionModel;
import com.appbyme.vplus.model.model.PushModel;
import com.mobcent.lowest.base.utils.MCResource;
import com.mobcent.discuz.android.model.SettingModel;
import com.mobcent.discuz.base.widget.TopBarWidget;
import com.mobcent.discuz.base.helper.TopBarHelper;
import com.mobcent.discuz.android.user.helper.UserManageHelper;
import android.view.MotionEvent;
import android.view.View;
import com.mobcent.discuz.application.DiscuzApplication;
import android.app.Application;
import android.support.v4.app.FragmentManager;
import android.os.IBinder;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.content.Context;
import java.io.Serializable;
import com.mobcent.discuz.android.model.PayStateModel;
import com.mobcent.discuz.android.model.BaseResultModel;
import com.mobcent.discuz.android.model.ConfigModel;
import android.content.Intent;
import com.mobcent.android.db.MCShareSharedPreferencesDB;
import com.mobcent.share.android.helper.MCShareQQHelper;
import com.mobcent.share.android.helper.MCShareQZoneHelper;
import android.content.res.Configuration;
import com.mobcent.discuz.android.exception.CrashHandler;
import com.mobcent.discuz.base.helper.DZTCHelper;
import android.graphics.drawable.Drawable;
import android.widget.Toast;

public abstract class BaseFragmentActivity extends FragmentActivity implements TopBarOptImpl, BaseIntentConstant, MCTouchSlidHelper.TouchSlideDelegate {
    protected String TAG;
    public static final int TYPE_COMPONENT = 0x3;
    public static final int TYPE_HOME = 0x1;
    public static final int TYPE_MODULE = 0x2;
    protected MCActionBarHelper actionBarHelper;
    protected Bundle bundle;
    private FragmentOptHelper fragmentHelper;
    protected InputMethodManager imm;
    protected PermissionModel permissionModel;
    protected PushModel pushModel;
    protected MCResource resource;
    protected SettingModel settingModel;
    protected MCTouchSlidHelper slideHelper;
    protected TopBarWidget topBar;
    protected TopBarHelper topBarHelper;
    protected UserManageHelper userManageHelper;

    protected abstract String getLayoutName();


    protected abstract void initActions();


    protected abstract void initViews();


    public void setSettingModel(SettingModel settingModel) {
        settingModel = settingModel;
    }

    public void setPermissionModel(PermissionModel permissionModel) {
        permissionModel = permissionModel;
    }

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            bundle = savedInstanceState;
            initBaseUtils();
            requestWindowFeature(0x1);
            overridePendingTransition(resource.getAnimId("slide_in_right"), 0x10a0001);
            if(savedInstanceState != null) {
                initSaveInstanceState(savedInstanceState);
            }
            parsePushModel();
            initDatas();
            initViews();
            initActions();
            getAppApplication().addActivity(this);
            return;
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }

    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        setIntent(intent);
    }

    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putSerializable("moduleModel", getAppApplication().getConfigModel());
        outState.putSerializable("settingModel", settingModel);
        outState.putSerializable("permissionModel", permissionModel);
        outState.putSerializable("PayStateModel", getAppApplication().getPayStateModel());
    }

    protected void initSaveInstanceState(Bundle savedInstanceState) {
        SettingModel settingModel = (SettingModel)savedInstanceState.getSerializable("settingModel");
        PermissionModel permissionModel = (PermissionModel)savedInstanceState.getSerializable("permissionModel");
        PayStateModel payStateModel = (PayStateModel)savedInstanceState.getSerializable("PayStateModel");
        BaseResultModel<ConfigModel> configModel = (BaseResultModel)savedInstanceState.getSerializable("moduleModel");
        if(settingModel != null) {
            settingModel = settingModel;
            userManageHelper.setSettingModel(settingModel);
            getAppApplication().setSettingModel(settingModel);
        }
        if(permissionModel != null) {
            permissionModel = permissionModel;
            userManageHelper.setPermissionModel(permissionModel);
            getAppApplication().setPermissionModel(permissionModel);
        }
        if(payStateModel != null) {
            getAppApplication().setPayStateModel(payStateModel);
        }
        if((getAppApplication().getConfigModel() == null) && (configModel != null)) {
            getAppApplication().setConfigModel(configModel);
        }
    }

    protected void initBaseUtils() {
        resource = MCResource.getInstance(getApplicationContext());
        userManageHelper = UserManageHelper.getInstance(getApplicationContext());
        slideHelper = new MCTouchSlidHelper(this);
        slideHelper.setDelegate(this);
    }

    protected void initDatas() {
        setContentViewByName(getLayoutName());
        if(isContainTopBar()) {
            View top = findViewById(resource.getViewId("top_bar_widget"));
            if(top == null) {
                throw new RuntimeException(resource.getString("top_bar_un_define"));
            }
            topBar = (TopBarWidget)top;
            topBarHelper = new TopBarHelper();
            topBarHelper.setTopBox(topBar);
        }
        imm = (InputMethodManager)getSystemService("input_method");
        if(settingModel == null) {
            settingModel = userManageHelper.getSettingModel();
        }
        if(permissionModel == null) {
            permissionModel = userManageHelper.getPermissionModel();
        }
    }

    protected boolean isContainTopBar() {
        return true;
    }

    protected View findViewByName(String viewName) {
        return findViewById(resource.getViewId(viewName));
    }

    protected View inflateLayout(String name) {
        return LayoutInflater.from(this).inflate(resource.getLayoutId(name), 0x0);
    }

    protected void setContentViewByName(String layoutName) {
        setContentView(resource.getLayoutId(layoutName));
    }

    protected DiscuzApplication getAppApplication() {
        return (DiscuzApplication)getApplication();
    }

    public TopBarHelper getTopBarHelper() {
        return topBarHelper;
    }

    protected FragmentOptHelper getFragmentHelper() {
        if(fragmentHelper == null) {
            fragmentHelper = new FragmentOptHelper(getSupportFragmentManager());
        }
        return fragmentHelper;
    }

    protected void toast(String msg) {
        Toast.makeText(getApplicationContext(), msg, 0x0).show();
    }

    public void hideSoftKeyboard() {
        if(getCurrentFocus() != null) {
            imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0x2);
        }
    }

    public void showSoftKeyboard() {
        if(getCurrentFocus() != null) {
            imm.showSoftInput(getCurrentFocus(), 0x1);
        }
    }

    protected void onResume() {
        super.onResume();
        if(isFullActionbar()) {
            getActionBarHelper().changeToFullActionBar(this, resource.getDrawable("mc_forum_top_bar_bg"));
        }
        parsePushModel();
        DZTCHelper.onPageStart(this, "");
        if(settingModel == null) {
            settingModel = getAppApplication().getSettingModel();
        }
        if(permissionModel == null) {
            permissionModel = getAppApplication().getPermissionModel();
        }
        if((settingModel == null) || (permissionModel == null)) {
            new Thread(this) {

                public void run() {
                    userManageHelper.getSetting(false, new UserManageHelper.SettingDataDelegate(this) {

                        public void saveSettingToApplication(SettingModel settingModel) {
                            (DiscuzApplication)getApplication().setSettingModel(settingModel);
                            setSettingModel(settingModel);
                        }

                        public void savePermissionToApplication(PermissionModel permissionModel) {
                            (DiscuzApplication)getApplication().setPermissionModel(permissionModel);
                            setPermissionModel(permissionModel);
                        }
                    });
                }
            }.start();
        }
    }

    protected void onPause() {
        super.onPause();
        DZTCHelper.onPageEnd(this, "");
    }

    public void finish() {
        super.finish();
        overridePendingTransition(0x0, resource.getAnimId("slide_out_right"));
    }

    public boolean dispatchTouchEvent(MotionEvent ev) {
        try {
            if(slideHelper.dispatchTouchEvent(ev)) {
                return true;
            }
            return super.dispatchTouchEvent(ev);
        } catch(Exception e) {
            return true;
        }
    }

    public boolean isSlideAble() {
        return true;
    }

    public boolean isSlideFullScreen() {
        return false;
    }

    public void slideExit() {
        hideSoftKeyboard();
        finish();
    }

    protected void onDestroy() {
        getAppApplication().removeActivity(this);
        hideSoftKeyboard();
        super.onDestroy();
    }

    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(MCShareSharedPreferencesDB.getInstance(getApplicationContext()).getPlatType().equals("QQ")) {
            MCShareQQHelper.onActivityResult(requestCode, resultCode, data);
            MCShareSharedPreferencesDB.getInstance(getApplicationContext()).setPlatType("");
            return;
        }
        if(MCShareSharedPreferencesDB.getInstance(getApplicationContext()).getPlatType().equals("QZONE")) {
            MCShareQZoneHelper.onActivityResult(requestCode, resultCode, data);
            MCShareSharedPreferencesDB.getInstance(getApplicationContext()).setPlatType("");
        }
    }

    protected boolean isFullActionbar() {
        return true;
    }

    protected PushModel parsePushModel() {
        PushModel tempPushModel = 0x0;
        return tempPushModel;
    }

    public MCActionBarHelper getActionBarHelper() {
        if(actionBarHelper == null) {
            actionBarHelper = new MCActionBarHelper();
        }
        return actionBarHelper;
    }
}
