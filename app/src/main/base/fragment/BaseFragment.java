/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.fragment;

import android.view.View;
import com.mobcent.discuz.base.model.TopBtnModel;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.Fragment;
import com.mobcent.discuz.base.constant.BaseIntentConstant;
import android.app.Activity;
import android.os.Bundle;
import com.mobcent.discuz.base.helper.FragmentOptHelper;
import android.view.inputmethod.InputMethodManager;
import android.view.LayoutInflater;
import com.mobcent.discuz.activity.view.MCProgressDialog;
import android.os.Handler;
import com.mobcent.discuz.android.model.ConfigComponentModel;
import com.mobcent.discuz.android.model.PermissionModel;
import com.mobcent.lowest.base.utils.MCResource;
import com.mobcent.discuz.android.model.SettingModel;
import com.mobcent.discuz.android.db.SharedPreferencesDB;
import java.util.List;
import android.os.AsyncTask;
import com.mobcent.discuz.base.helper.TopBarOptImpl;
import com.mobcent.discuz.android.user.helper.UserManageHelper;
import java.util.ArrayList;
import com.mobcent.discuz.base.model.TopSettingModel;
import android.text.TextUtils;
import com.mobcent.discuz.base.helper.TopBarHelper;
import com.mobcent.lowest.base.utils.MCPhoneUtil;
import android.content.Context;
import com.mobcent.discuz.application.DiscuzApplication;
import android.app.Application;
import android.support.v4.app.FragmentManager;
import android.os.IBinder;
import java.io.Serializable;
import com.mobcent.discuz.android.model.PayStateModel;
import com.mobcent.discuz.activity.BasePopActivity;
import com.mobcent.discuz.android.exception.CrashHandler;
import android.view.ViewGroup;

public abstract class BaseFragment extends Fragment implements BaseIntentConstant {
    public String TAG;
    protected final long TIME_DELAYED;
    protected Activity activity;
    private Bundle bundle;
    private FragmentOptHelper fragmentHelper;
    private InputMethodManager imm;
    protected LayoutInflater inflater;
    protected boolean isFirstInit;
    private MCProgressDialog loadingPro;
    protected Handler mHandler;
    protected ConfigComponentModel moduleModel;
    protected PermissionModel permissionModel;
    protected MCResource resource;
    protected View rootView;
    protected SettingModel settingModel;
    protected SharedPreferencesDB sharedPreferencesDB;
    private final List<AsyncTask<?, ?, ?>> taskList<AsyncTask<?, ?, ?>>;
    private TopBarOptImpl topBarOptImpl;
    protected UserManageHelper userManageHelper;
    
    protected abstract String getRootLayoutName();
    
    
    protected abstract void initActions(View p1);
    
    
    protected abstract void initViews(View p1);
    
    
    public BaseFragment() {
        TAG = "BaseFragment";
        moduleModel = 0x0;
        settingModel = 0x0;
        permissionModel = 0x0;
        mHandler = new Handler();
        taskList = new ArrayList();
        isFirstInit = true;
        TIME_DELAYED = 0x0;
    }
    
    public void setSettingModel(SettingModel settingModel) {
        settingModel = settingModel;
    }
    
    public void setPermissionModel(PermissionModel permissionModel) {
        permissionModel = permissionModel;
    }
    
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            topBarOptImpl = activity;
            return;
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            initDatas(savedInstanceState);
            return;
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // :( Parsing error. Please contact me.
    }
    
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }
    
    public void onStart() {
        super.onStart();
    }
    
    public void onResume() {
        super.onResume();
        try {
            if(settingModel == null) {
                settingModel = getAppApplication().getSettingModel();
            }
            if(permissionModel == null) {
                permissionModel = getAppApplication().getPermissionModel();
            }
            if((settingModel == null) || (permissionModel == null)) {
                new Thread(this) {
                    
                    public void run() {
                        userManageHelper.getSetting(false, new UserManageHelper.SettingDataDelegate(this) {
                            
                            public void saveSettingToApplication(SettingModel settingModel) {
                                getAppApplication().setSettingModel(settingModel);
                                setSettingModel(settingModel);
                            }
                            
                            public void savePermissionToApplication(PermissionModel permissionModel) {
                                getAppApplication().setPermissionModel(permissionModel);
                                setPermissionModel(permissionModel);
                            }
                        });
                    }
                }.start();
                return;
            }
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    public void onPause() {
        try {
            super.onPause();
            return;
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    public void onStop() {
        super.onStop();
    }
    
    public void onDestroyView() {
        try {
            super.onDestroyView();
            if(loadingPro != null) {
                loadingPro.cancel();
                return;
            }
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    public void onDestroy() {
        try {
            cancelAllTask();
            super.onDestroy();
            return;
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    public void onSaveInstanceState(Bundle outState) {
        try {
            super.onSaveInstanceState(outState);
            outState.putSerializable("componentModel", moduleModel);
            outState.putSerializable("settingModel", settingModel);
            outState.putSerializable("permissionModel", permissionModel);
            outState.putSerializable("isFristCreate", Boolean.valueOf(isFirstInit));
            outState.putSerializable("PayStateModel", getAppApplication().getPayStateModel());
            return;
        } catch(Exception e) {
            e.printStackTrace();
            CrashHandler.getInstance().handleExceptionBySelf(e);
        }
    }
    
    protected void initDatas(Bundle savedInstanceState) {
        activity = getActivity();
        resource = MCResource.getInstance(getActivity());
        sharedPreferencesDB = SharedPreferencesDB.getInstance(activity.getApplicationContext());
        inflater = LayoutInflater.from(activity.getApplicationContext());
        userManageHelper = UserManageHelper.getInstance(activity.getApplicationContext());
        imm = (InputMethodManager)activity.getSystemService("input_method");
        settingModel = userManageHelper.getSettingModel();
        permissionModel = userManageHelper.getPermissionModel();
        moduleModel = (ConfigComponentModel)getBundle().getSerializable("componentModel");
        if(savedInstanceState != null) {
            initSaveInstanceState(savedInstanceState);
        }
    }
    
    protected void initSaveInstanceState(Bundle savedInstanceState) {
        moduleModel = (ConfigComponentModel)savedInstanceState.getSerializable("componentModel");
        settingModel = (SettingModel)savedInstanceState.getSerializable("settingModel");
        permissionModel = (PermissionModel)savedInstanceState.getSerializable("permissionModel");
        isFirstInit = savedInstanceState.getBoolean("isFristCreate");
        getAppApplication().setPayStateModel((PayStateModel)savedInstanceState.getSerializable("PayStateModel"));
        userManageHelper.setPermissionModel(permissionModel);
        userManageHelper.setSettingModel(settingModel);
    }
    
    protected View findViewByName(View parent, String name) {
        return parent.findViewById(resource.getViewId(name));
    }
    
    protected DiscuzApplication getAppApplication() {
        if(getActivity() == null) {
            return DiscuzApplication._instance;
        }
        return (DiscuzApplication)getActivity().getApplication();
    }
    
    protected void firstCreate() {
        isFirstInit = false;
    }
    
    protected void componentDealTopbar() {
        dealTopBar(createTopSettingModel());
    }
    
    public void hideSoftKeyboard() {
        if(activity.getCurrentFocus() != null) {
            imm.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), 0x2);
        }
    }
    
    public void showSoftKeyboard() {
        if(activity.getCurrentFocus() != null) {
            imm.showSoftInput(activity.getCurrentFocus(), 0x1);
        }
    }
    
    protected FragmentOptHelper getFragmentHelper() {
        if(fragmentHelper == null) {
            fragmentHelper = new FragmentOptHelper(getChildFragmentManager());
        }
        return fragmentHelper;
    }
    
    protected TopSettingModel createTopSettingModel() {
        TopSettingModel topSettingModel = new TopSettingModel();
        topSettingModel.style = isPop() ? 0x1 : 0x0;
        if(moduleModel != null) {
            topSettingModel.title = TextUtils.isEmpty(moduleModel.getDefaultTitle()) ? moduleModel.getTitle() : moduleModel.getDefaultTitle();
        }
        return topSettingModel;
    }
    
    protected void dealTopBar(TopSettingModel topSettingModel) {
        if((topBarOptImpl != null) && (topBarOptImpl.getTopBarHelper() != null)) {
            topBarOptImpl.getTopBarHelper().dealTopBar(topSettingModel);
            registerTopListener(0x0);
        }
    }
    
    protected void registerTopListener(View.OnClickListener topClickListener) {
        if((topBarOptImpl != null) && (topBarOptImpl.getTopBarHelper() != null)) {
            topBarOptImpl.getTopBarHelper().registerClickListener(new BaseFragment.TopClickListener(this, topClickListener));
        }
    }
    
    protected TopBarHelper getTopBarHelper() {
        TopBarHelper helper = 0x0;
        if((topBarOptImpl != null) && (topBarOptImpl.getTopBarHelper() != null)) {
            return helper;
        }
        TopBarHelper helper = new TopBarHelper();
        return helper;
    }
    
    protected boolean isPop() {
        if(getActivity() instanceof BasePopActivity) {
            return true;
        }
        return false;
    }
    
    protected int dip2px(int dipValue) {
        return MCPhoneUtil.dip2px(activity, (float)dipValue);
    }
    
    public void loadDataByNet() {
    }
    
    protected void addTask(AsyncTask<?, ?, ?> task) {
        taskList.add(task);
    }
    
    protected void cancelAllTask() {
        for(AsyncTask<?, ?, ?> task : taskList) {
            if((task != null) && (!task.isCancelled())) {
                task.cancel(true);
            }
        }
    }
    
    public boolean isChildInteruptBackPress() {
        return false;
    }
    
    protected Bundle getBundle() {
        if(bundle == null) {
            bundle = getArguments();
            if(bundle == null) {
                bundle = new Bundle();
            }
        }
        return bundle;
    }
    
    public MCProgressDialog getLoadingPro() {
        if(loadingPro == null) {
            loadingPro = new MCProgressDialog(activity);
        }
        return loadingPro;
    }
    
    protected boolean isCloseEmailRegister() {
        if((settingModel != null) && (settingModel.isCloseEmail())) {
            return true;
        }
        return false;
    }
}
