/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.fragment;

import com.mobcent.lowest.android.ui.widget.web.MCWebViewClient;
import android.webkit.WebView;
import com.mobcent.lowest.base.utils.MCLogUtil;
import com.mobcent.lowest.android.ui.widget.MCWebView;
import com.mobcent.lowest.base.utils.MCResource;
import com.mobcent.discuz.application.DiscuzApplication;
import com.mobcent.discuz.base.delegate.SlideDelegate;
import com.mobcent.discuz.android.constant.ConfigConstant;
import com.mobcent.lowest.android.ui.module.ad.widget.AdView;
import android.widget.Button;
import android.view.View;
import android.os.Handler;
import com.mobcent.lowest.android.ui.widget.web.MCWebChromeClient;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import java.util.List;
import com.mobcent.lowest.android.ui.widget.web.MCWebViewMoreModelItem;
import com.mobcent.discuz.activity.view.MCPopupListView;
import android.widget.TextView;
import com.mobcent.discuz.base.helper.TopBarHelper;
import com.mobcent.discuz.base.widget.TopBarWidget;
import com.mobcent.discuz.base.model.TopSettingModel;
import com.mobcent.lowest.base.utils.MCListUtils;
import com.mobcent.discuz.base.model.TopBtnModel;
import java.util.ArrayList;
import android.app.Activity;
import com.mobcent.discuz.activity.PopComponentActivity;
import com.mobcent.lowest.android.ui.widget.web.MCWebViewMoreModel;
import android.text.TextUtils;
import com.mobcent.discuz.android.model.ConfigComponentModel;
import java.io.InputStreamReader;
import android.content.res.Resources;
import android.content.res.AssetManager;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.Reader;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import com.mobcent.discuz.android.model.PayStateModel;
import com.mobcent.lowest.base.manager.LowestManager;
import com.mobcent.lowest.base.config.LowestConfig;
import com.mobcent.lowest.base.config.LowestJsDelegate;
import com.mobcent.discuz.base.dispatch.ActivityDispatchHelper;
import android.content.Context;
import com.mobcent.discuz.zbar.scan.delegate.ScanCallbackDelegate;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.content.ClipboardManager;
import com.mobcent.lowest.base.utils.MCToastUtils;
import android.text.ClipboardManager;
import com.mobcent.discuz.android.model.ConfigFastPostModel;
import com.mobcent.discuz.android.model.SettingModel;
import android.widget.RelativeLayout;
import com.mobcent.lowest.base.utils.MCPhoneUtil;
import android.os.Bundle;
import com.mobcent.lowest.base.utils.MCStringUtil;
import com.mobcent.lowest.android.ui.widget.web.MCWebViewDelegate;
import android.webkit.WebViewClient;
import android.webkit.WebChromeClient;
import android.view.Window;
import com.mobcent.android.model.MCShareModel;
import java.util.HashMap;
import com.mobcent.discuz.base.helper.MCForumLaunchShareHelper;

public class WebViewFragment extends BaseFragment implements SlideDelegate, ConfigConstant {
    private int BACK;
    private int CLOSE;
    private int JS_RIGHT1;
    private int JS_RIGHT2;
    private int MORE;
    private final String PLUGIN_STR;
    public String TAG;
    public static final String VIDEO = "video";
    private int adPostition;
    private AdView adView;
    private Button backBtn;
    private View failedIcon;
    private Handler handler;
    public boolean isVideoPlayFullScreen;
    private boolean isWebMore;
    private String jsInterfaceCode;
    private MCWebChromeClient mChromeClient;
    private FrameLayout mainContent;
    private ProgressBar mcProgressBar;
    private MCWebView mcWebview;
    private List<MCWebViewMoreModelItem> moreItems;
    private MCPopupListView popupListView;
    private FrameLayout statusBox;
    private TextView statusText;
    private String title;
    private View.OnClickListener topBarClickListener;
    private String type;
    private String url;
    private String webUrlOriginal;
    
    public WebViewFragment() {
        TAG = "WebViewFragment";
        BACK = 0x4;
        handler = new Handler();
        isVideoPlayFullScreen = false;
        PLUGIN_STR = "mobcent/app/web/index.php?r=";
        isWebMore = false;
        topBarClickListener = new View.OnClickListener(this) {
            
            public void onClick(View v) {
                TopBtnModel t = (TopBtnModel)v.getTag();
                if(t.action == MORE) {
                    topMoreClick();
                    return;
                }
                if(t.action == CLOSE) {
                    return;
                }
                if(t.action == BACK) {
                    boolean isInterupt = isChildInteruptBackPress();
                    if(!isInterupt) {
                    }
                    return;
                }
                if((t.action == JS_RIGHT1) || (t.action == JS_RIGHT2)) {
                    MCWebViewMoreModelItem itemModel = t.tag2;
                    if(MCWebViewMoreModel.TOPBAR_REFRESH.equals(itemModel.type)) {
                        return;
                    }
                    ActivityDispatchHelper.dispatchActivity(activity, localConfigComponentModel1);
                }
            }
        };
    }
    
    protected void initDatas(Bundle savedInstanceState) {
        super.initDatas(savedInstanceState);
        if(moduleModel == null) {
            webUrlOriginal = getBundle().getString("webViewUrl");
            adPostition = getBundle().getInt("adPosition", 0x0);
            title = getBundle().getString("webTitle");
            type = getBundle().getString("webType");
        } else {
            title = moduleModel.getTitle();
            webUrlOriginal = moduleModel.getRedirect();
        }
        if(adPostition == 0) {
            adPostition = Integer.parseInt(resource.getString("mc_forum_webview_position"));
        }
        if(MCStringUtil.isEmpty(title)) {
            title = resource.getString("app_name");
        }
        if(TextUtils.isEmpty(webUrlOriginal)) {
            close();
            return;
        }
        if((!TextUtils.isEmpty(webUrlOriginal)) && (webUrlOriginal.startsWith("tel:"))) {
            Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(url));
            try {
                activity.startActivity(intent);
            } catch(Exception localException1) {
            }
            close();
            return;
        }
        if(!isPluginsAviliable(webUrlOriginal)) {
            onWebError("", "plugins not aviliable");
            return;
        }
        jsInterfaceCode = getFromAssets("AppbymeJavascriptBridge.js");
    }
    
    protected String getRootLayoutName() {
        return "webview_fragment";
    }
    
    protected void initViews(View rootView) {
        mcProgressBar = (ProgressBar)findViewByName(rootView, "mc_forum_web_progressbar");
        adView = (AdView)findViewByName(rootView, "mc_ad_box");
        popupListView = (MCPopupListView)findViewByName(rootView, "popup_listview");
        mainContent = (FrameLayout)findViewByName(rootView, "main_content");
        mcWebview = (MCWebView)findViewByName(rootView, "mc_forum_webview_browser");
        backBtn = (Button)findViewByName(rootView, "back_btn");
        statusBox = (FrameLayout)findViewByName(rootView, "status_layout");
        failedIcon = findViewByName(rootView, "failed_icon");
        statusText = (TextView)findViewByName(rootView, "status_text");
        mChromeClient = new MCWebChromeClient(this, activity, this) {
            
            public void onShowCustomView(View view, WebChromeClient.CustomViewCallback callback) {
                super.onShowCustomView(view, callback);
                isVideoPlayFullScreen = true;
                getTopBarHelper().hideTopBar();
                backBtn.setVisibility(0x0);
                if(activity instanceof HomeActivity) {
                    (HomeActivity)activity.changeBottomState(true);
                }
                if((activity instanceof BaseFragmentActivity) && ((BaseFragmentActivity)activity.getActionBarHelper() != null)) {
                    (BaseFragmentActivity)activity.getActionBarHelper().changeToFullActionBar(activity, 0x0);
                }
            }
            
            public void onProgressChanged(WebView view, int progress) {
                super.onProgressChanged(view, progress);
                MCLogUtil.e(TAG, "======progress========" + progress);
                if(progress == 0x64) {
                    return;
                }
            }
            
            public void onHideCustomView() {
                super.onHideCustomView();
                isVideoPlayFullScreen = false;
                getTopBarHelper().showTopBar();
                backBtn.setVisibility(0x8);
                if(activity instanceof HomeActivity) {
                    (HomeActivity)activity.changeBottomState(false);
                }
                if((activity instanceof BaseFragmentActivity) && ((BaseFragmentActivity)activity.getActionBarHelper() != null)) {
                    (BaseFragmentActivity)activity.getActionBarHelper().changeToFullActionBar(activity, resource.getDrawable("mc_forum_top_bar_bg"));
                }
            }
        };
        mChromeClient.setWebTitleChangeListener(new MCWebChromeClient.WebTitleChangeListener(this) {
            
            public void onReceivedTitle(WebView view, String title) {
                MCLogUtil.e(TAG, "==========onReceivedTitle=======" + title);
                if(activity instanceof PopComponentActivity) {
                    getTopBarHelper().changeTitle(title);
                }
            }
        });
        if(activity instanceof PopComponentActivity) {
            mcWebview.setDelegate(new MCWebViewDelegate(this) {
                
                public void onJsChangeTop(MCWebViewMoreModel model) {
                }
                
                public void onJsClosePage() {
                }
            });
        }
        url = webUrlOriginal;
        if(TextUtils.isEmpty(url)) {
            MCToastUtils.toastByResName(activity.getApplicationContext(), "mc_forum_webview_url_error");
            close();
        }
        mcWebview.setWebViewClient(new WebViewFragment.MyWebViewClient(this));
        mcWebview.setWebChromeClient(mChromeClient);
        adView.showAd(adPostition);
        mHandler.postDelayed(new Runnable(this) {
            
            public void run() {
            }
        }, 0x1f4);
    }
    
    protected void initActions(View rootView) {
        popupListView.setResource("mc_forum_pop_upmenu_bg1", 0x28);
        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(MCPhoneUtil.getRawSize(activity, 0x1, 120.0f), -0x2);
        layoutParams.addRule(0xb);
        layoutParams.rightMargin = MCPhoneUtil.getRawSize(activity, 0x1, 8.0f);
        popupListView.setPopupListViewLayoutParams(layoutParams);
        popupListView.setPopupList(initClassifyView());
        popupListView.init(initClassifyView(), new MCPopupListView.PopupClickListener(this) {
            
            public void initTextView(TextView textView) {
                textView.setTextColor(getResources().getColorStateList(resource.getColorId("mc_forum_bubble_color")));
                textView.setTextSize(14.0f);
            }
            
            public void click(TextView textView, ImageView imageView, MCPopupListView.PopupModel popupModel, int position) {
                popupListView.setVisibility(0x8);
                if(isWebMore) {
                    return;
                }
                if(popupModel.getId() == -0x1) {
                    ClipboardManager cmb = (ClipboardManager)activity.getSystemService("clipboard");
                    cmb.setText(url.toString());
                    MCToastUtils.toastByResName(activity.getApplicationContext(), "mc_forum_webview_copy_url_succ");
                    return;
                }
                if(popupModel.getId() == -0x2) {
                    Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(url));
                    try {
                        startActivity(intent);
                        return;
                    } catch(Exception localException1) {
                        return;
                    }
                }
                if(popupModel.getId() == -0x3) {
                    share(url.toString());
                    return;
                }
                if(popupModel.getId() == -0x4) {
                }
            }
            
            public void hideView() {
            }
        });
        backBtn.setOnClickListener(new View.OnClickListener(this) {
            
            public void onClick(View v) {
                isChildInteruptBackPress();
            }
        });
    }
    
    private void moreItemClick(int id) {
        // :( Parsing error. Please contact me.
    }
    
    public void share(String url) {
        MCShareModel shareModel = new MCShareModel();
        shareModel.setType(0x3);
        shareModel.setLinkUrl(url);
        shareModel.setSkipUrl(url);
        shareModel.setContent(mcWebview.getTitle());
        shareModel.setTitle(mcWebview.getTitle());
        shareModel.setDownloadUrl(resource.getString("mc_discuz_base_request_url") + resource.getString("mc_share_download_url"));
        HashMap<String, String> params = new HashMap<String, String>();
        params.put("shareFrom", "php");
        params.put("baseUrl", resource.getString("mc_discuz_base_request_url"));
        params.put("contentType", String.valueOf(0x3));
        params.put("sdkVersion", "2.4.0");
        shareModel.setParams(params);
        MCForumLaunchShareHelper.share(activity, shareModel);
    }
    
    private void changeTopLeftBtn() {
        TopSettingModel topSettingModel = getTopBarHelper().getTopBox().getTopSettingModel();
        if(topSettingModel == null) {
            return;
        }
        if(!MCListUtils.isEmpty(topSettingModel.leftModels)) {
            int count = topSettingModel.leftModels.size();
            boolean containClose = 0x0;
            for(int i = 0x0; i < count; i = i + 0x1) {
                TopBtnModel btnModel = (TopBtnModel)topSettingModel.leftModels.get(i);
                if(btnModel.action == CLOSE) {
                    containClose = true;
                }
            }
            if(!containClose) {
                topSettingModel.leftModels = new ArrayList();
                TopBtnModel left1 = new TopBtnModel();
                left1.action = BACK;
                left1.icon = "mc_forum_top_bar_button1";
                topSettingModel.leftModels.add(left1);
                if(mcWebview.canGoBack()) {
                    TopBtnModel left2 = new TopBtnModel();
                    left2.action = CLOSE;
                    left2.title = resource.getString("mc_forum_webview_close");
                    topSettingModel.leftModels.add(left2);
                }
            }
        }
        dealTopBar(topSettingModel);
        registerTopListener(topBarClickListener);
    }
    
    private List<MCPopupListView.PopupModel> initWebTopMenu(MCWebViewMoreModel model) {
        ArrayList<MCPopupListView.PopupModel> popList = new ArrayList<MCPopupListView.PopupModel>();
        if((model != null) && (MCListUtils.isEmpty(model.more))) {
            return popList;
        }
        moreItems = model.more;
        int size = model.more.size();
        for(int i = 0x0; i < size; i = i + 0x1) {
            MCPopupListView.PopupModel popModel = new MCPopupListView.PopupModel();
            MCWebViewMoreModelItem item = (MCWebViewMoreModelItem)model.more.get(i);
            popModel.setName(item.name);
            popModel.setId(i);
            popList.add(popModel);
        }
        return popList;
    }
    
    private List initClassifyView() {
        ArrayList<MCPopupListView.PopupModel> list = new ArrayList<MCPopupListView.PopupModel>();
        MCPopupListView.PopupModel model = new MCPopupListView.PopupModel();
        model.setId(-0x1);
        model.setName(resource.getString("mc_forum_copy_url"));
        list.add(model);
        MCPopupListView.PopupModel model = new MCPopupListView.PopupModel();
        model.setId(-0x2);
        model.setName(resource.getString("mc_forum_open_in_browser"));
        list.add(model);
        MCPopupListView.PopupModel model = new MCPopupListView.PopupModel();
        model.setId(-0x3);
        model.setName(resource.getString("mc_forum_announce_share"));
        list.add(model);
        MCPopupListView.PopupModel model = new MCPopupListView.PopupModel();
        model.setId(-0x4);
        model.setName(resource.getString("mc_forum_webview_refresh"));
        list.add(model);
        return list;
    }
    
    public void onDestroy() {
        try {
            if(adView != null) {
                adView.free();
            }
            mcWebview.onDestory();
            super.onDestroy();
            return;
        } catch(Exception localException1) {
        }
    }
    
    public void onResume() {
        super.onResume();
        activity.getWindow().clearFlags(0x80);
        if(mcWebview != null) {
            mcWebview.onWebResume();
        }
    }
    
    public void onPause() {
        if(mChromeClient != null) {
            mChromeClient.onHideCustomView();
        }
        super.onPause();
        activity.getWindow().clearFlags(0x80);
        if(mcWebview != null) {
            mcWebview.onWebPause();
        }
    }
    
    protected void componentDealTopbar() {
        TopSettingModel topSettingModel = createTopSettingModel();
        ArrayList<TopBtnModel> LeftModels = new ArrayList<TopBtnModel>();
        TopBtnModel topBtnModel1 = new TopBtnModel();
        topBtnModel1.action = BACK;
        topBtnModel1.icon = "mc_forum_top_bar_button1";
        LeftModels.add(topBtnModel1);
        ArrayList<TopBtnModel> rightModels = new ArrayList<TopBtnModel>();
        if((moduleModel != null) && (!TextUtils.isEmpty(moduleModel.getTitle()))) {
            topSettingModel.title = moduleModel.getTitle();
        } else {
            topSettingModel.title = title;
        }
        SettingModel settingModel = getAppApplication().getSettingModel();
        if((settingModel != null) && (settingModel.isWebviewTopbarMore())) {
            rightModels.add(createMoreBtnModel());
        }
        topSettingModel.style = 0x0;
        topSettingModel.rightModels = rightModels;
        topSettingModel.leftModels = LeftModels;
        dealTopBar(topSettingModel);
        registerTopListener(topBarClickListener);
    }
    
    private TopBtnModel createMoreBtnModel() {
        TopBtnModel topBtnModel = new TopBtnModel();
        topBtnModel.icon = "mc_forum_top_bar_button12";
        topBtnModel.action = MORE;
        return topBtnModel;
    }
    
    private void dealJsChangeTop(MCWebViewMoreModel model) {
        isWebMore = true;
        MCLogUtil.e(TAG, model.toString());
        TopSettingModel topSettingModel = getTopBarHelper().getTopBox().getTopSettingModel();
        topSettingModel.rightModels = new ArrayList();
        if(model.button1 != null) {
            TopBtnModel right1 = new TopBtnModel();
            right1.action = JS_RIGHT1;
            right1.icon = getJsTopIcon(model.button1.type);
            right1.title = model.button1.title;
            if(!TextUtils.isEmpty(right1.icon)) {
                right1.title = "";
            }
            right1.tag = parseJsComponentModel(model.button1);
            right1.tag2 = model.button1;
            topSettingModel.rightModels.add(right1);
        } else if(!MCListUtils.isEmpty(model.more)) {
            topSettingModel.rightModels.add(createMoreBtnModel());
            popupListView.setPopupList(initWebTopMenu(model));
        }
        if(model.button2 != null) {
            TopBtnModel right2 = new TopBtnModel();
            right2.action = JS_RIGHT2;
            right2.icon = getJsTopIcon(model.button2.type);
            right2.title = model.button2.title;
            if(!TextUtils.isEmpty(right2.icon)) {
                right2.title = "";
            }
            right2.tag = parseJsComponentModel(model.button2);
            right2.tag2 = model.button2;
            topSettingModel.rightModels.add(right2);
        }
        dealTopBar(topSettingModel);
        registerTopListener(topBarClickListener);
    }
    
    private ConfigComponentModel parseJsComponentModel(MCWebViewMoreModelItem itemModel) {
        ConfigComponentModel componentModel = new ConfigComponentModel();
        componentModel.setType(parseComponentType(itemModel));
        componentModel.setTitle(itemModel.title);
        componentModel.setIcon(getJsTopIcon(itemModel.type));
        componentModel.setStyle("flat");
        componentModel.setRedirect(itemModel.url);
        boolean isShowTopicTitle = 0x1;
        try {
            isShowTopicTitle = Boolean.parseBoolean(itemModel.isTitle);
        } catch(Exception localException1) {
        }
        componentModel.setShowTopicTitle(isShowTopicTitle);
        componentModel.setListImagePosition(0x1);
        componentModel.setListTitleLength(0x14);
        componentModel.setListSummaryLength(0x28);
        if((!TextUtils.isEmpty(itemModel.boardId)) && (!TextUtils.isEmpty(itemModel.boardName))) {
            ArrayList<ConfigFastPostModel> fastPostList = new ArrayList<ConfigFastPostModel>();
            ConfigFastPostModel fastModel = new ConfigFastPostModel();
            fastModel.setFid(Long.parseLong(itemModel.boardId));
            fastModel.setName(itemModel.boardName);
            fastPostList.add(fastModel);
            componentModel.setFastPostList(fastPostList);
        }
        return componentModel;
    }
    
    private String parseComponentType(MCWebViewMoreModelItem itemModel) {
        String jsType = itemModel.type;
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_USERINFO)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_SEARCH)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_SIGN)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_SCAN)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_FASTTEXT)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_FASTIMAGE)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_FASTCAMERA)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_FASTAUDIO)) {
            return type;
        }
        if(jsType.equals(MCWebViewMoreModel.TOPBAR_WEBAPP)) {
            return type;
        }
        return type;
    }
    
    private String getJsTopIcon(String type) {
        String icon = "";
        if(type.equals(MCWebViewMoreModel.TOPBAR_FASTTEXT)) {
            String icon = "mc_forum_top_bar_button21";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_FASTIMAGE)) {
            String icon = "mc_forum_top_bar_button22";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_FASTCAMERA)) {
            String icon = "mc_forum_top_bar_button24";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_FASTAUDIO)) {
            String icon = "mc_forum_top_bar_button23";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_WEBAPP)) {
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_SCAN)) {
            String icon = "mc_forum_top_bar_button25";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_SEARCH)) {
            String icon = "mc_forum_top_bar_button10";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_REFRESH)) {
            String icon = "mc_forum_top_bar_button7";
        }
        if(type.equals(MCWebViewMoreModel.TOPBAR_USERINFO)) {
            String icon = "mc_forum_top_bar_button6";
        }
        return icon;
    }
    
    public void topMoreClick() {
        if(popupListView == null) {
            return;
        }
        if(popupListView.getVisibility() == 0) {
            popupListView.setVisibility(0x8);
            return;
        }
        popupListView.setVisibility(0x0);
    }
    
    public boolean isChildInteruptBackPress() {
        if(isVideoPlayFullScreen) {
            mChromeClient.onHideCustomView();
            return true;
        }
        if((mcWebview != null) && (mcWebview.canGoBack())) {
            changeTopLeftBtn();
            mcWebview.goBack();
            return true;
        }
        if((popupListView == null) || (popupListView.onKeyDown())) {
            return super.isChildInteruptBackPress();
        }
        return true;
    }
    
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mChromeClient.onActivityResult(requestCode, resultCode, data);
    }
    
    public boolean isSlideFullScreen() {
        return false;
    }
    
    private String getFromAssets(String fileName) {
        // :( Parsing error. Please contact me.
    }
    
    private void loadUrl(String url) {
        if(!TextUtils.isEmpty(url)) {
            mcWebview.loadUrl(url);
            checkServer();
        }
    }
    
    private void checkServer() {
        (new Runnable(this) {
            
            public void run() {
                if(localint1 == 0x194) {
                }
            }
        }).start();
    }
    
    private int getRespStatus(String url) {
        if((TextUtils.isEmpty(url)) || (!url.startsWith("http"))) {
            return -0x1;
        }
        int status = -0x1;
        try {
            HttpGet get = new HttpGet(url);
            DefaultHttpClient client = new DefaultHttpClient();
            HttpResponse resp = client.execute(get);
            return status;
        } catch(Exception localException1) {
            return status;
        }
    }
    
    private void onWebError(String url, String errorMsg) {
        handler.post(new Runnable(this, errorMsg) {
            
            public void run() {
                mcWebview.stopLoading();
                mcWebview.loadUrl("javascript:document.body.innerHTML=\"" + errorMsg + "\"");
            }
        });
    }
    
    private boolean isPluginsAviliable(String url) {
        if(url.contains("mobcent/app/web/index.php?r=")) {
            boolean isPluginAviliable = 0x0;
            PayStateModel payStateModel = DiscuzApplication._instance.getPayStateModel();
            if((payStateModel != null) && (payStateModel.getPhpPlugins() != null) && (payStateModel.getPhpPlugins().length != 0)) {
                String[] phpPlugins = payStateModel.getPhpPlugins();
                int count = phpPlugins.length;
                for(int i = 0x0; i < count; i = i + 0x1) {
                    plugin = phpPlugins[i];
                    if(url.contains("mobcent/app/web/index.php?r=" + plugin + "/")) {
                        isPluginAviliable = true;
                        break;
                    }
                }
            }
            if(!isPluginAviliable) {
                close();
                return isPluginAviliable;
            }
        }
        return true;
    }
    
    private void showLoading() {
        if(statusBox.getVisibility() != 0) {
            statusBox.setVisibility(0x0);
        }
        if(mcProgressBar.getVisibility() != 0) {
            mcProgressBar.setVisibility(0x0);
        }
        String loading = resource.getString("mc_forum_loading");
        statusText.setText(loading);
    }
    
    private void hideLoading() {
        mcProgressBar.setVisibility(0x8);
        if(failedIcon.getVisibility() != 0) {
            statusBox.setVisibility(0x8);
        }
    }
    
    private void showError() {
        MCLogUtil.e(TAG, "=====showError========");
        mcWebview.stopLoading();
        mcProgressBar.setVisibility(0x8);
        statusBox.setVisibility(0x0);
        statusText.setVisibility(0x0);
        failedIcon.setVisibility(0x0);
        statusText.setText(resource.getString("mc_forum_web_loaded_failed"));
        statusBox.setOnClickListener(new View.OnClickListener(this) {
            
            public void onClick(View v) {
                failedIcon.setVisibility(0x8);
                statusBox.setOnClickListener(0x0);
                mcWebview.reload();
            }
        });
    }
    
    private void close() {
        if((activity != null) && (activity instanceof PopComponentActivity)) {
            activity.finish();
        }
    }
}
