/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.fragment;

import android.widget.TextView;
import android.widget.ImageView;
import com.mobcent.discuz.base.adapter.BaseListAdatper;
import android.content.Context;
import java.util.List;
import com.mobcent.discuz.android.model.ConfigComponentModel;
import android.text.TextUtils;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.widget.ListView;
import com.mobcent.discuz.android.model.ConfigModuleModel;
import com.mobcent.lowest.base.utils.MCListUtils;
import java.util.Collection;
import android.os.Handler;
import android.widget.AdapterView;
import android.os.Bundle;
import java.util.ArrayList;
import android.app.Activity;
import android.widget.ListAdapter;

public class ImgTextPageFragment extends BaseModuleFragment {
    private ImgTextPageFragment.ListAdapter adapter;
    private List<ConfigComponentModel> componentModels;
    private ListView list;
    
    public ImgTextPageFragment() {
    }
    
    protected String getRootLayoutName() {
        return "base_img_text_fragment";
    }
    
    protected void initDatas(Bundle savedInstanceState) {
        super.initDatas(savedInstanceState);
        componentModels = new ArrayList();
    }
    
    protected void initViews(View rootView) {
        super.initViews(rootView);
        list = (ListView)findViewByName(rootView, "pull_refresh_list");
        adapter = new ImgTextPageFragment.ListAdapter(this, activity, componentModels);
        list.setAdapter(adapter);
    }
    
    protected void initActions(View rootView) {
        list.setOnItemClickListener(new AdapterView.OnItemClickListener(this) {
            
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if((ConfigOptHelper.isNeedLogin((ConfigComponentModel)componentModels.get(position).getType())) && (!LoginHelper.doInterceptor(getActivity(), 0x0, 0x0))) {
                    return;
                }
                ActivityDispatchHelper.dispatchActivity(activity, (ConfigComponentModel)componentModels.get(position));
            }
        });
    }
    
    protected void firstCreate() {
        super.firstCreate();
        new Thread(this) {
            
            public void run() {
            }
        }.start();
    }
    
    private void setData() {
        if((moduleModel != null) && (!MCListUtils.isEmpty(moduleModel.getComponentList()))) {
            List<ConfigComponentModel> componentList = moduleModel.getComponentList();
            componentModels.addAll(componentList);
            mHandler.post(new Runnable(this) {
                
                public void run() {
                    adapter.notifyDataSetChanged();
                }
            });
        }
    }
    
    class ListAdapter extends BaseListAdatper {
        
        public ListAdapter(Context p1, List<ConfigComponentModel> context, List datas) {
            super(context, datas);
        }
        
        protected void initViews(View convertView, ImgTextPageFragment.Holder holder) {
            holder.titleText = (TextView)findViewByName(convertView, "title_text");
            holder.descText = (TextView)findViewByName(convertView, "desc_text");
            holder.img = (ImageView)findViewByName(convertView, "pre_img");
        }
        
        protected void initViewDatas(ImgTextPageFragment.Holder holder, ConfigComponentModel data, int position) {
            if(TextUtils.isEmpty(data.getTitle())) {
                holder.titleText.setVisibility(0x8);
            } else {
                holder.titleText.setVisibility(0x0);
                holder.titleText.setText(data.getTitle());
            }
            if(TextUtils.isEmpty(data.getDesc())) {
                holder.descText.setVisibility(0x8);
            } else {
                holder.descText.setVisibility(0x0);
                holder.descText.setText(data.getDesc());
            }
            if(!TextUtils.isEmpty(data.getIcon())) {
                holder.img.setBackgroundDrawable(0x0);
            } else {
                holder.img.setBackgroundColor(-0x1);
            }
            loadImage(holder.img, data.getIcon());
        }
        
        protected String getLayoutName() {
            return "base_img_text_fragment_item";
        }
        
        protected ImgTextPageFragment.Holder instanceHolder() {
            return new ImgTextPageFragment.Holder(this$0);
        }
    }
    
    class Holder {
        public TextView descText;
        public ImageView img;
        public TextView titleText;
    }
}
