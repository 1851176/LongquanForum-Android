/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.widget;

import com.mobcent.discuz.android.user.helper.UserManageHelper;
import android.view.View;
import com.mobcent.discuz.android.model.UserInfoModel;
import android.os.Handler;
import android.widget.RelativeLayout;
import android.widget.LinearLayout;
import com.mobcent.lowest.base.utils.MCResource;
import com.mobcent.lowest.android.ui.widget.MCTabBarScrollView;
import android.widget.TextView;
import com.mobcent.discuz.base.model.TopSettingModel;
import android.content.Context;
import android.util.AttributeSet;
import android.view.ViewGroup;
import com.mobcent.discuz.base.model.TopBtnModel;
import android.widget.Button;
import java.util.List;
import com.mobcent.lowest.base.utils.MCListUtils;
import com.mobcent.discuz.android.model.ConfigComponentModel;
import java.util.ArrayList;
import android.graphics.drawable.Drawable;
import com.mobcent.discuz.android.model.SettingModel;
import com.mobcent.lowest.base.manager.LowestManager;
import com.mobcent.lowest.base.config.LowestConfig;
import com.mobcent.lowest.module.weather.model.WeatherModel;
import com.mobcent.lowest.android.ui.module.weather.helper.WeatherWidgetHelper;
import com.mobcent.lowest.base.utils.MCPhoneUtil;
import android.text.TextUtils;
import android.content.res.Resources;
import com.mobcent.discuz.android.service.impl.UserServiceImpl;
import com.mobcent.discuz.android.service.UserService;
import com.mobcent.discuz.android.db.SharedPreferencesDB;
import com.nostra13.universalimageloader.core.assist.ImageSize;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
import com.mobcent.lowest.base.utils.MCLogUtil;
import android.view.animation.RotateAnimation;
import android.view.animation.Animation;

public class TopBarWidget extends RelativeLayout {
    public static final int ID_BACK = -0x1;
    public static final int ID_TITLE = -0x2;
    public static final int ID_WEATHER = -0x3;
    private View arrow;
    private int currentPosition;
    private LinearLayout leftBox;
    private TopBarWidget.MyHeadChangeListener listener;
    public View.OnClickListener outSideListener;
    private MCResource resource;
    private LinearLayout rightBox;
    private MCTabBarScrollView tabBar;
    private TextView titleText;
    private TopSettingModel topSettingModel;
    private int topTitleMaxWidth;
    public String TAG = "TopBarWidget";
    private Handler mHandler = new Handler();
    private final int _ID_TITLE = 0xb;
    private int topBarHeight = 0x2c;
    
    public TopSettingModel getTopSettingModel() {
        return topSettingModel;
    }
    
    public void setTopSettingModel(TopSettingModel topSettingModel) {
        topSettingModel = topSettingModel;
    }
    private View.OnClickListener clickListener = new View.OnClickListener(this) {
        
        public void onClick(View v) {
            if(outSideListener != null) {
                outSideListener.onClick(v);
            }
        }
    };
    
    public TopBarWidget(Context context) {
        this(context, 0x0);
    }
    
    public TopBarWidget(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context);
    }
    
    private void init(Context context) {
        setGravity(0x10);
        resource = MCResource.getInstance(context);
        titleText = new TextView(context);
        titleText.setId(0xb);
        titleText.setSingleLine(true);
        titleText.setTextColor(resource.getColor("mc_forum_topbar_title_color"));
        titleText.setGravity(0x11);
        topTitleMaxWidth = ((MCPhoneUtil.getDisplayWidth(context) - dip2px((topBarHeight * 0x4))) - dip2px(0xa));
        titleText.setMaxWidth(topTitleMaxWidth);
        titleText.setEllipsize(TextUtils.TruncateAt.END);
        titleText.setTextSize(0x0, getResources().getDimension(resource.getDimenId("mc_forum_text_size_19")));
        TopBtnModel topBtnModel = new TopBtnModel();
        topBtnModel.action = -0x2;
        titleText.setTag(topBtnModel);
        titleText.setOnClickListener(clickListener);
        RelativeLayout.LayoutParams lps = new RelativeLayout.LayoutParams(-0x2, -0x1);
        lps.addRule(0xd, -0x1);
        addView(titleText, lps);
    }
    
    private void setTitle(String title) {
        titleText.setText(title);
    }
    
    public String getTitle() {
        return titleText.getText().toString();
    }
    
    public void changeTitle(String title) {
        if((titleText != null) && (!TextUtils.isEmpty(title))) {
            if(topSettingModel != null) {
                topSettingModel.title = title;
            }
            titleText.setText(title);
        }
    }
    
    public void rotateTitleDrawable(boolean arrowDown) {
        if(arrow != null) {
            arrow.clearAnimation();
            RotateAnimation animation = 0x0;
            if(!arrowDown) {
                RotateAnimation animation = new RotateAnimation(0.0f, 0.0f, 0x1, 0.0f, 0x1, 0.0f);
            } else {
                RotateAnimation animation = new RotateAnimation(0.0f, 0.0f, 0x1, 0.0f, 0x1, 0.0f);
            }
            animation.setDuration(0x1f4);
            animation.setFillAfter(true);
            arrow.startAnimation(animation);
        }
    }
    
    public void resetTopSetting(TopSettingModel topSettingModel) {
        if(topSettingModel == null) {
            MCLogUtil.e(TAG, "the TopSettingModel you seted to topbar is null");
            return;
        }
        setTopSettingModel(topSettingModel);
        if(topSettingModel.isTitleClickAble) {
            arrow = new View(getContext());
            arrow.setBackgroundDrawable(resource.getDrawable("mc_forum_top_bar_arrow"));
            RelativeLayout.LayoutParams lps = new RelativeLayout.LayoutParams(dip2px(0xd), dip2px(0xd));
            lps.addRule(0x1, titleText.getId());
            lps.leftMargin = dip2px(0x5);
            lps.addRule(0xf, -0x1);
            addView(arrow, lps);
        }
        setTitle(topSettingModel.title);
        if(topSettingModel.isVisibile) {
            setVisibility(0x0);
            if(leftBox != null) {
                leftBox.removeAllViews();
            }
            if(rightBox != null) {
                rightBox.removeAllViews();
            }
            if(topSettingModel.style == 0x1) {
                createPublicLeftBtn(-0x1);
            }
            createTopView(topSettingModel);
            createTopSubTab(topSettingModel);
            return;
        }
        setVisibility(0x8);
    }
    
    private void createTopSubTab(TopSettingModel topSettingModel) {
        if(tabBar != null) {
            removeView(tabBar);
            tabBar = 0x0;
        }
        if(MCListUtils.isEmpty(topSettingModel.subComponentList)) {
            titleText.setVisibility(0x0);
            return;
        }
        currentPosition = topSettingModel.subCurrentPosition;
        titleText.setVisibility(0x8);
        if(tabBar == null) {
            tabBar = new MCTabBarScrollView(getContext());
            tabBar.setBackgroundResource(resource.getDrawableId("mc_forum_tab_style4_bg"));
        }
        List<ConfigComponentModel> subList = topSettingModel.subComponentList<ConfigComponentModel>;
        ArrayList<String> tabList = new ArrayList<String>();
        for(int i = 0x0; i < subList.size(); i = i + 0x1) {
            tabList.add((ConfigComponentModel)subList.get(i).getTitle());
        }
        int tabWidth = topTitleMaxWidth / 0x3;
        int tabHeight = dip2px(0x1c);
        int maxTab = 0x3;
        int tabSize = subList.size() > maxTab ? maxTab : subList.size();
        int tabTotalWidth = tabSize >= 0x3 ? dip2px(0xb4) : dip2px(0xa0);
        tabWidth = tabTotalWidth / tabSize;
        RelativeLayout.LayoutParams lps = new RelativeLayout.LayoutParams((tabWidth * tabSize), tabHeight);
        lps.addRule(0xd, -0x1);
        tabBar.setTabBoxView(0x0, tabHeight, lps.width);
        tabBar.setArrowView(resource.getDrawable("mc_forum_tab_style4_selected"), tabHeight, tabWidth);
        tabBar.setContainArrow(true);
        tabBar.setLayoutParams(lps);
        tabBar.setArrowOver(false);
        tabBar.init(getContext(), tabList, tabSize, new MCTabBarScrollView.ClickSubNavListener(this) {
            
            public void onClickSubNav(View v, int position, TextView view) {
                MCLogUtil.e(TAG, "onClickSubNav====position =========" + position);
                currentPosition = position;
                if(getTopSettingModel().subTitleListener != null) {
                    getTopSettingModel().subTitleListener.onSelected(currentPosition);
                }
            }
            
            public void initTextView(TextView view) {
                if((view != null) && (view.getTag() != null)) {
                    int position = (Integer)view.getTag().intValue();
                    MCLogUtil.e(TAG, currentPosition + "initTextView===position =========" + position);
                    if(position == currentPosition) {
                        view.setTextColor(resource.getColor("mc_forum_tabbar2_press_color"));
                        view.setTextSize(0x0, getResources().getDimension(resource.getDimenId("mc_forum_text_size_14")));
                        return;
                    }
                    view.setTextColor(resource.getColor("mc_forum_tabbar2_normal_color"));
                    view.setTextSize(0x0, getResources().getDimension(resource.getDimenId("mc_forum_text_size_13")));
                }
            }
        });
        addView(tabBar);
        tabBar.selectCurrentTabNoAnimation(currentPosition);
    }
    
    public void selectTopSub(int position) {
        if(tabBar != null) {
            tabBar.selectCurrentTab(position);
        }
    }
    
    private void createPublicLeftBtn(int action) {
        TopBtnModel topBtnModel = new TopBtnModel();
        topBtnModel.action = action;
        if(action == -0x1) {
            topBtnModel.icon = "mc_forum_top_bar_button1";
        }
        View view = createTopBtn(topBtnModel);
        if(leftBox == null) {
            leftBox = createLinearLayout(true);
        }
        leftBox.addView(view);
    }
    
    private void createTopView(TopSettingModel topSettingModel) {
        initTopBtn(topSettingModel.leftModels, true);
        initTopBtn(topSettingModel.rightModels, false);
    }
    
    private void initTopBtn(List<TopBtnModel> topModels, boolean isLeft) {
        if((topModels != null) && (!topModels.isEmpty())) {
            for(int i = 0x0; i < topModels.size(); i = i + 0x1) {
                TopBtnModel topModel = (TopBtnModel)topModels.get(i);
                View child = 0x0;
                ConfigComponentModel tag = 0x0;
                if(topModel.tag instanceof ConfigComponentModel) {
                    ConfigComponentModel tag = topModel.tag;
                    if("weather".equals(tag.getType())) {
                        topModel.action = -0x3;
                    } else if("sign".equals(tag.getType())) {
                        topModel.title = resource.getString("mc_forum_sign");
                    }
                }
                if(topModel.action == -0x3) {
                    child = createWeatherWidget(topModel);
                } else {
                    child = createTopBtn(topModel);
                }
                if((isLeft) && (leftBox == null)) {
                    leftBox = createLinearLayout(true);
                }
                if((!isLeft) && (rightBox == null)) {
                    rightBox = createLinearLayout(false);
                }
                if(child == null) {
                } else if((tag != null) && ("userinfo".equals(tag.getType()))) {
                    UserServiceImpl userService = new UserServiceImpl(getContext().getApplicationContext());
                    if(userService.isLogin()) {
                        loadHeadIcon(child);
                    }
                    if(listener != null) {
                        UserManageHelper.getInstance(getContext()).removeListener(listener);
                    }
                    listener = new TopBarWidget.MyHeadChangeListener(this, child);
                    UserManageHelper.getInstance(getContext()).registListener(listener);
                }
                LinearLayout.LayoutParams lps = (LinearLayout.LayoutParams)child.getLayoutParams();
                child.setLayoutParams(lps);
                if(isLeft) {
                    leftBox.addView(child);
                    continue;
                }
                rightBox.addView(child, 0x0);
            } else if(leftBox == null) {
                leftBox = createLinearLayout(true);
            }
            if(rightBox == null) {
                rightBox = createLinearLayout(false);
                break;
            }
        }
    }
    
    private LinearLayout createLinearLayout(boolean isLeft) {
        LinearLayout linearLayout = new LinearLayout(getContext());
        linearLayout.setOrientation(0x0);
        RelativeLayout.LayoutParams lps = new RelativeLayout.LayoutParams(-0x2, -0x1);
        linearLayout.setLayoutParams(lps);
        if(isLeft) {
            lps.addRule(0x9, -0x1);
        } else {
            lps.addRule(0xb, -0x1);
        }
        addView(linearLayout);
        return linearLayout;
    }
    
    public Button createTopBtn(TopBtnModel topBtnModel) {
        Button btn = new Button(getContext());
        btn.setIncludeFontPadding(false);
        int padding = -dip2px(0x5);
        btn.setPadding(padding, 0x0, padding, 0x0);
        btn.setSingleLine(true);
        btn.setTextColor(resource.getColor("mc_forum_topbar_button_color"));
        btn.setGravity(0x11);
        btn.setTextSize(0x0, getResources().getDimension(resource.getDimenId("mc_forum_text_size_15")));
        btn.setText(topBtnModel.title);
        if(!TextUtils.isEmpty(topBtnModel.icon)) {
            btn.setBackgroundResource(resource.getDrawableId(topBtnModel.icon));
        } else {
            btn.setBackgroundResource(resource.getDrawableId("mc_forum_top_bar_button2"));
        }
        LinearLayout.LayoutParams lps = new LinearLayout.LayoutParams(dip2px(topBarHeight), dip2px(topBarHeight));
        lps.gravity = 0x10;
        btn.setLayoutParams(lps);
        btn.setOnClickListener(clickListener);
        btn.setTag(topBtnModel);
        return btn;
    }
    
    private View createWeatherWidget(TopBtnModel topBtnModel) {
        SettingModel settingModel = UserManageHelper.getInstance(getContext()).getSettingModel();
        List<WeatherModel> weatherList = LowestManager.getInstance().getConfig().getWeatherListCache();
        int qs = 0x0;
        if(settingModel != null) {
            qs = settingModel.getAllowCityQueryWeather();
        }
        WeatherModel weatherModel = 0x0;
        if(!MCListUtils.isEmpty(weatherList)) {
            weatherModel = weatherList.get(0x0);
        }
        if(topBtnModel.tag2 instanceof WeatherModel) {
            WeatherModel weatherModel = topBtnModel.tag2;
        }
        View child = WeatherWidgetHelper.createWeatherWidget(getContext(), weatherModel, qs);
        LinearLayout.LayoutParams lps = new LinearLayout.LayoutParams(-0x2, -0x1);
        child.setLayoutParams(lps);
        return child;
    }
    
    public void registerClickListener(View.OnClickListener clickListener) {
        outSideListener = clickListener;
    }
    
    private int dip2px(int dipValue) {
        return MCPhoneUtil.dip2px(getContext(), (float)dipValue);
    }
    
    private void loadHeadIcon(View headView) {
        String headUrl = SharedPreferencesDB.getInstance(getContext().getApplicationContext()).getIcon();
        if(TextUtils.isEmpty(headUrl)) {
            return;
        }
        ImageSize targetSize = new ImageSize(headView.getWidth(), headView.getHeight());
        ImageLoader.getInstance().loadImage(headUrl, targetSize, new SimpleImageLoadingListener(this, headView) {
            
            public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                headView.setBackgroundResource(resource.getDrawableId("mc_forum_top_bar_button6"));
            }
            
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                if((loadedImage != null) && (!loadedImage.isRecycled())) {
                    int imgWidth = ;
                    Bitmap currentIconBitmap = MCBitmapUtil.createRoundHeadIcon(getContext(), (float)imgWidth, (float)imgWidth, localint1, loadedImage);
                    if(currentIconBitmap != null) {
                        headView.setBackgroundDrawable(new BitmapDrawable(getResources(), currentIconBitmap));
                        return;
                    }
                    headView.setBackgroundResource(resource.getDrawableId("mc_forum_top_bar_button6"));
                    return;
                }
                headView.setBackgroundResource(resource.getDrawableId("mc_forum_top_bar_button6"));
            }
            
            public void onLoadingCancelled(String imageUri, View view) {
                headView.setBackgroundResource(resource.getDrawableId("mc_forum_top_bar_button6"));
            }
        });
    }
    
    class MyHeadChangeListener implements UserManageHelper.ChangeUserInfoListener {
        private View userBtn;
        
        public MyHeadChangeListener(TopBarWidget p1, View userBtn) {
            userBtn = userBtn;
        }
        
        public void change(boolean isLogin, UserInfoModel userInfoModel) {
            if(isLogin) {
                mHandler.post(new Runnable(this) {
                    
                    public void run() {
                    }
                });
                return;
            }
            post(new Runnable(this) {
                
                public void run() {
                    TopBarWidget.MyHeadChangeListener.userBtn.setBackgroundDrawable(resource.getDrawable("mc_forum_top_bar_button6"));
                }
            });
        }
    }
}
