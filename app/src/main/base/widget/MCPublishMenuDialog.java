/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mobcent.discuz.base.widget;

import android.app.AlertDialog;
import com.mobcent.discuz.activity.constant.FinalConstant;
import com.mobcent.discuz.android.constant.ConfigConstant;
import android.widget.LinearLayout;
import android.widget.Button;
import java.util.List;
import com.mobcent.discuz.android.model.ConfigComponentModel;
import android.content.Context;
import android.view.LayoutInflater;
import com.mobcent.discuz.android.model.PermissionModel;
import com.mobcent.lowest.base.utils.MCResource;
import com.mobcent.discuz.android.model.SettingModel;
import android.view.View;
import java.util.ArrayList;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import com.mobcent.discuz.activity.utils.DZImageLoadUtils;
import com.mobcent.lowest.base.utils.MCListUtils;
import android.widget.RelativeLayout;
import com.mobcent.discuz.android.model.TopicDraftModel;
import android.content.Intent;
import com.mobcent.discuz.module.publish.fragment.activity.PublishTopicActivity;
import com.mobcent.discuz.base.helper.LoginHelper;
import java.util.HashMap;
import com.mobcent.discuz.module.sign.SignInAsyncTask;
import com.mobcent.lowest.base.utils.MCToastUtils;
import com.mobcent.discuz.base.dispatch.ActivityDispatchHelper;
import android.os.Bundle;
import android.view.Window;
import com.mobcent.lowest.base.utils.MCPhoneUtil;
import android.view.WindowManager;

public class MCPublishMenuDialog extends AlertDialog implements FinalConstant, ConfigConstant {
    private LinearLayout bottomBox;
    private Button cancleBtn;
    private List<ConfigComponentModel> componentList<ConfigComponentModel>;
    private Context context;
    private int count;
    private LayoutInflater inflater;
    private int marginLeft;
    private LinearLayout middleBox;
    private PermissionModel permissionModel;
    private MCResource resource;
    private SettingModel settingModel;
    private LinearLayout topBox;
    
    public MCPublishMenuDialog(Context context) {
        super(context);
        context = context;
        initDate();
    }
    
    public MCPublishMenuDialog(Context context, int theme) {
        super(context, theme);
        context = context;
        initDate();
    }
    
    private void initDate() {
        resource = MCResource.getInstance(context);
        componentList = new ArrayList();
        inflater = LayoutInflater.from(context);
    }
    
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(resource.getLayoutId("publish_dialog"));
        topBox = (LinearLayout)findViewById(resource.getViewId("mc_forum_top_box"));
        middleBox = (LinearLayout)findViewById(resource.getViewId("mc_forum_middle_box"));
        bottomBox = (LinearLayout)findViewById(resource.getViewId("mc_forum_bottom_box"));
        cancleBtn = (Button)findViewById(resource.getViewId("mc_forum_cancle_btn"));
        if(marginLeft != 0) {
            RelativeLayout.LayoutParams lps = (RelativeLayout.LayoutParams)cancleBtn.getLayoutParams();
            lps.addRule(0x9);
            lps.leftMargin = marginLeft;
            cancleBtn.setLayoutParams(lps);
        }
        initView();
        initActions();
    }
    
    private void initActions() {
        cancleBtn.setOnClickListener(new View.OnClickListener(this) {
            
            public void onClick(View arg0) {
                dismiss();
            }
        });
    }
    
    private void initView() {
        if(MCListUtils.isEmpty(componentList)) {
            componentList = createComponentList();
        }
        count = componentList.size();
        int j = count % 0x3;
        for(int i = 0x0; i < count; i = i + 0x1) {
            if(j == 0) {
                compute(i);
            } else if((j == 0x1) && (count == 0x4)) {
                if(i < 0x2) {
                    middleBox.addView(createPublishItem((ConfigComponentModel)componentList.get(i)));
                } else {
                    bottomBox.addView(createPublishItem((ConfigComponentModel)componentList.get(i)));
                } else if(j == 0x1) {
                    compute(i);
                } else {
                    compute(i);
                }
            }
            if(count == 0x7) {
                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams)bottomBox.getLayoutParams();
                layoutParams.addRule(0x9, -0x1);
                bottomBox.setLayoutParams(layoutParams);
            }
        }
    }
    
    private void compute(int i) {
        if(i < 0x3) {
            topBox.addView(createPublishItem((ConfigComponentModel)componentList.get(i)));
            return;
        }
        if(i < 0x6) {
            middleBox.addView(createPublishItem((ConfigComponentModel)componentList.get(i)));
            return;
        }
        if(i < 0x9) {
            bottomBox.addView(createPublishItem((ConfigComponentModel)componentList.get(i)));
        }
    }
    
    private List createComponentList() {
        ArrayList<ConfigComponentModel> componentModels = new ArrayList<ConfigComponentModel>();
        componentModels.add(createConfigComponentModel(resource.getString("mc_forum_publish_text"), "mc_forum_ico27", "fasttext"));
        componentModels.add(createConfigComponentModel(resource.getString("mc_forum_pic_topic_list"), "mc_forum_ico28", "fastimage"));
        componentModels.add(createConfigComponentModel(resource.getString("mc_forum_take_photo"), "mc_forum_ico29", "fastcamera"));
        componentModels.add(createConfigComponentModel(resource.getString("mc_forum_posts_voice"), "mc_forum_ico45", "fastaudio"));
        return componentModels;
    }
    
    private ConfigComponentModel createConfigComponentModel(String title, String icon, String type) {
        ConfigComponentModel componentModel = new ConfigComponentModel();
        componentModel.setTitle(title);
        componentModel.setIcon(icon);
        componentModel.setType(type);
        return componentModel;
    }
    
    private View createPublishItem(ConfigComponentModel componentModel) {
        View view = inflater.inflate(resource.getLayoutId("publish_item"), 0x0);
        ImageView button = (ImageView)view.findViewById(resource.getViewId("mc_forum_publish_btn"));
        TextView textView = (TextView)view.findViewById(resource.getViewId("mc_forum_publish_text"));
        DZImageLoadUtils.loadImage(button, componentModel.getIcon());
        if(componentModel.getTitle().length() > 0x5) {
            textView.setText(componentModel.getTitle().substring(0x0, 0x5));
        } else {
            textView.setText(componentModel.getTitle());
        }
        button.setOnClickListener(new View.OnClickListener(this, componentModel) {
            
            public void onClick(View arg0) {
                if(LoginHelper.doInterceptor(context, 0x0, 0x0)) {
                    if(!DraftHelper.isNeedAlertDialog(context, 0x1, new DraftHelper.DraftDelegate(this) {
                        
                        public void onDraftAlertBack(TopicDraftModel model) {
                            onClick(val$componentModel, model);
                        }
                    })) {
                        onClick(componentModel, 0x0);
                    }
                }
                dismiss();
            }
        });
        return view;
    }
    
    public void onClick(ConfigComponentModel componentModel, TopicDraftModel topicDraftModel) {
        if(componentModel.getType().equals("fasttext")) {
            Intent intent = new Intent(context, PublishTopicActivity.class);
            intent.putExtra("moduleModel", componentModel);
            intent.putExtra("topicDraftModel", topicDraftModel);
            intent.putExtra("tempParam", 0x1);
            context.startActivity(intent);
            return;
        }
        if(componentModel.getType().equals("fastimage")) {
            Intent intent = new Intent(context, PublishTopicActivity.class);
            intent.putExtra("rapidPublish", 0x1);
            intent.putExtra("moduleModel", componentModel);
            intent.putExtra("topicDraftModel", topicDraftModel);
            intent.putExtra("tempParam", 0x1);
            context.startActivity(intent);
            return;
        }
        if(componentModel.getType().equals("fastcamera")) {
            Intent intent = new Intent(context, PublishTopicActivity.class);
            intent.putExtra("rapidPublish", 0x2);
            intent.putExtra("moduleModel", componentModel);
            intent.putExtra("topicDraftModel", topicDraftModel);
            intent.putExtra("tempParam", 0x1);
            context.startActivity(intent);
            return;
        }
        if(componentModel.getType().equals("sign")) {
            if((settingModel != null) && (settingModel.getPlugCheck() == 0x1)) {
                if(LoginHelper.doInterceptor(context, 0x0, 0x0)) {
                    new SignInAsyncTask(context, 0x0).execute(new Void[0x0]);
                }
                return;
            }
            MCToastUtils.toast(context, resource.getString("mc_forum_error_sign_none"), 0x1);
            return;
        }
        if(componentModel.getType().equals("fastaudio")) {
            Intent intent = new Intent(context, PublishTopicActivity.class);
            intent.putExtra("rapidPublish", 0x3);
            intent.putExtra("moduleModel", componentModel);
            intent.putExtra("topicDraftModel", topicDraftModel);
            context.startActivity(intent);
            return;
        }
        ActivityDispatchHelper.dispatchActivity(context, componentModel);
    }
    
    public void show() {
        super.show();
    }
    
    public void show(View v) {
        int[] location = new int[0x2];
        v.getLocationOnScreen(location);
        setMarginLeft(location[0x0]);
        Window win = getWindow();
        int displayHeight = MCPhoneUtil.getDisplayHeight(getContext());
        WindowManager.LayoutParams params = win.getAttributes();
        params.height = displayHeight;
        params.width = MCPhoneUtil.getDisplayWidth(getContext());
        win.addFlags(0x400);
        win.setAttributes(params);
        show();
    }
    
    public void dismiss() {
        super.dismiss();
    }
    
    protected void onStop() {
        super.onStop();
    }
    
    public PermissionModel getPermissionModel() {
        return permissionModel;
    }
    
    public void setPermissionModel(PermissionModel permissionModel) {
        permissionModel = permissionModel;
    }
    
    public void setConfigComponenList(List<ConfigComponentModel> list) {
        componentList = list;
    }
    
    public SettingModel getSettingModel() {
        return settingModel;
    }
    
    public void setSettingModel(SettingModel settingModel) {
        settingModel = settingModel;
    }
    
    public int getMarginLeft() {
        return marginLeft;
    }
    
    public void setMarginLeft(int marginLeft) {
        marginLeft = marginLeft;
    }
}
