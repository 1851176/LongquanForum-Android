/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.mobcent.discuz.activity;

import com.appbyme.app178470.R;
import com.mobcent.discuz.base.constant.BaseIntentConstant;
import com.mobcent.lowest.android.ui.module.plaza.constant.PlazaConstant;
import com.mobcent.discuz.android.constant.ConfigConstant;

import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.widget.LinearLayout;

public class HomeActivity extends FragmentActivity implements BaseIntentConstant, PlazaConstant, ConfigConstant {
    public String TAG;
    private LinearLayout bottomBox;
    /*private ConfigService configService;
    private FrameLayout container;
    private int count;
    private MCPublishMenuDialog dialog;
    boolean firstMsg;
    private Fragment[] fragments;
    private boolean isContainMsgOnly;
    private boolean isHaveNav;
    private boolean isNeedLoginInterupt;
    private int loginInteruptPosition;
    private ConfigModuleModel msgConfigModuleModel;
    private String msgModuleTag;
    private Button[] navBtns;
    private List<ConfigModuleModel> navModuleList;
    private MsgNotificationHelper notificationHelper;
    private ActivityObserver observer;
    private ObserverHelper observerHelper;
    private UriSkipModel skipModel;
    private View.OnClickListener tabClickListener;
    private UserService userService;*/
    private Resources resource;

    public HomeActivity() {
        /*TAG = "HomeActivity";
        isNeedLoginInterupt = false;
        loginInteruptPosition = 0x0;
        msgModuleTag = 0x0;
        userService = 0x0;
        navModuleList = new ArrayList();
        isHaveNav = false;
        fragments = 0x0;
        skipModel = 0x0;
        firstMsg = false;
        tabClickListener = new View.OnClickListener(this) {

            public void onClick(View v) {
                if((v.getTag() != null) && (v.getTag() instanceof ConfigModuleModel)) {
                    ConfigModuleModel moduleModel = (ConfigModuleModel)v.getTag();
                    if(moduleModel.getType().equals("fastpost")) {
                        if(dialog == null) {
                            MCPublishMenuDialog dialog = this$0new MCPublishMenuDialog(this$0, resource.getStyleId("mc_forum_home_publish_dialog"));
                            dialog = localMCPublishMenuDialog1;
                        }
                        dialog.setConfigComponenList(moduleModel.getComponentList());
                        dialog.setPermissionModel(permissionModel);
                        dialog.setSettingModel(settingModel);
                        if(dialog.isShowing()) {
                            dialog.dismiss();
                            return;
                        }
                        dialog.show(v);
                        return;
                    }
                    if(("full".equals(moduleModel.getType())) && (ConfigOptHelper.navContainOnly(moduleModel, "messagelist")) && (!LoginHelper.doInterceptor(this$0, 0x0, 0x0))) {
                        isNeedLoginInterupt = true;
                        loginInteruptPosition = moduleModel.getPosition();
                        return;
                    }
                    if((ConfigOptHelper.isNeedLogin(moduleModel)) && (!LoginHelper.doInterceptor(this$0, 0x0, 0x0))) {
                        isNeedLoginInterupt = true;
                        loginInteruptPosition = moduleModel.getPosition();
                        return;
                    }
                }
            }
        };*/
    }

    /*private void selectCurrentTab(ConfigModuleModel moduleModel) {
        if(moduleModel == null) {
            return;
        }
        int position = moduleModel.getPosition();
        for(int i = 0x0; i < fragments.length; i = i + 0x1) {
            Fragment curFragment = fragments[i];
            Button btn = navBtns[i];
            if(position == i) {
                if(btn != null) {
                    btn.setSelected(true);
                }
                if(curFragment == null) {
                    curFragment = FragmentDispatchHelper.disPatchFragment(moduleModel);
                    fragments[i] = curFragment;
                    getFragmentHelper().addFragment(container.getId(), curFragment);
                } else {
                    getFragmentHelper().showFragment(curFragment);
                    curFragment.onResume();
                }
                if(curFragment instanceof BaseModuleFragment) {
                    Fragment tempFragment = curFragment;
                    tempFragment.dealTopBar();
                } else if(btn != null) {
                    btn.setSelected(false);
                }
                if(curFragment != null) {
                    getFragmentHelper().hideFragment(curFragment);
                    curFragment.onPause();
                }
            }
        }
    }

    private void selectFirst() {
        if(!MCListUtils.isEmpty(navModuleList)) {
            selectCurrentTab((ConfigModuleModel)navModuleList.get(0x0));
        }
    }

    protected String getLayoutName() {
        return "home_page_activity";
    }

    protected void initDatas() {
        // super.initDatas();
        UpdateCheckHelper.check(this, "2.4.0", 0x0);
        configService = new ConfigServiceImpl(getApplicationContext());
        userService = new UserServiceImpl(getApplicationContext());
        observerHelper = ObserverHelper.getInstance();
        notificationHelper = MsgNotificationHelper.getInstance(getApplicationContext());
        if(getIntent() != null) {
            boolean isPush = getIntent().getBooleanExtra("push", false);
            if(isPush) {
                getAppApplication().setConfigModel(new ConfigServiceImpl(getApplicationContext()).getConfigModelByLocal(ConfigOptHelper.getConfigId(this)));
            }
        }
        XGHelper.registerXG(getApplicationContext());
        XGHelper.startXGService(getApplicationContext());
        if(GotyeMsgHelper.isGotyeIM()) {
            GotyeMsgHelper.getInstance(getApplicationContext()).login();
        }
    }

    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        setIntent(intent);
        setupMsgTag(intent);
        MCLogUtil.e(TAG, "=======HomeActivity====onNewIntent======");
        clearAllView();
        setupTabHost();
    }*/

    public void onCreate(Bundle paramBundle)
    {
        super.onCreate(paramBundle);
        setContentView(R.layout.home_page_activity);
    }

    /*private void clearAllView() {
        container.removeAllViews();
        bottomBox.removeAllViews();
        navModuleList.clear();
        try {
            if(fragments != null) {
                fragments = 0x0;
            }
            if(navBtns != null) {
                navBtns = 0x0;
            }
            List<Fragment> cacheFragments = getSupportFragmentManager().getFragments();
            if(!MCListUtils.isEmpty(cacheFragments)) {
                cacheFragments.clear();
                return;
            }
        } catch(Exception localException1) {
        }
    }

    protected void initViews() {
        container = (FrameLayout)findViewByName("container");
        bottomBox = (LinearLayout)findViewByName("bottomBox");
        setupTabHost();
        setupMsgTag(getIntent());
    }

    protected void initActions() {
    }

    protected void onResume() {
        super.onResume();
        notificationHelper.setHomeActivity(true);
        notificationHelper.setNotExistApp(true);
        observerHelper.getActivityObservable().updateHomeTabNum(observerHelper.getActivityObservable().getTabNum(getApplicationContext(), SharedPreferencesDB.getInstance(getApplicationContext()).getUserId()));
        if((isNeedLoginInterupt) && (userService.isLogin())) {
            navBtns[loginInteruptPosition].performClick();
            isNeedLoginInterupt = false;
            loginInteruptPosition = 0x0;
            return;
        }
        isNeedLoginInterupt = false;
        loginInteruptPosition = 0x0;
    }

    public void changeBottomState(boolean isHide) {
        if(isHide) {
            bottomBox.setVisibility(View.GONE);
            return;
        }
        bottomBox.setVisibility(View.VISIBLE);
    }

    private void setupMsgTag(Intent intent) {
        if(intent != null) {
            boolean skipToHomeMsg = intent.getBooleanExtra("skipToHomeMsg", false);
            if((skipToHomeMsg) && (isContainMsgOnly) && (msgConfigModuleModel != null)) {
                selectCurrentTab(msgConfigModuleModel);
            }
            String skipToWhere = intent.getStringExtra("homeSkipToWhere");
            if(!TextUtils.isEmpty(skipToWhere)) {
                if("homeSkipToSession".equals(skipToWhere)) {
                    Intent sessionIntent = new Intent(getApplicationContext(), SessionListActivity.class);
                    sessionIntent.setFlags(0x400);
                    startActivity(sessionIntent);
                } else if("homeSkipToChat".equals(skipToWhere)) {
                    MsgUserListModel msgUserListModel = (MsgUserListModel)intent.getSerializableExtra("msgUserListModel");
                    if(msgUserListModel != null) {
                        Intent chatRoomIntent = new Intent(getApplicationContext(), ChatRoomActivity.class);
                        chatRoomIntent.putExtra("msgUserListModel", msgUserListModel);
                        chatRoomIntent.setFlags(0x400);
                        startActivity(chatRoomIntent);
                    }
                }
            }
            skipModel = (UriSkipModel)getIntent().getSerializableExtra("skipUriModel");
            new Handler().postDelayed(new HomeActivity.2(this), 0x1f4);
        }
    }

    private void setupTabHost() {
        // :( Parsing error. Please contact me.
    }

    public void onBackPressed() {
        if(count == 0x1) {
            System.exit(0x0);
            super.onBackPressed();
            return;
        }
        count = (count + 0x1);
        Toast.makeText(this, resource.getStringId("mc_forum_home_back_exit"), 0x0).show();
        new Handler().postDelayed(new HomeActivity.4(this), 0x1388);
    }

    protected void onPause() {
        super.onPause();
        notificationHelper.setHomeActivity(false);
    }

    protected void onDestroy() {
        if(observer != null) {
            observerHelper.getActivityObservable().unregisterObserver(observer);
        }
        super.onDestroy();
    }

    public boolean isSlideAble() {
        return false;
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if((fragments != null) && (fragments.length == 0)) {
            return;
        }
        for(int i = 0x0; i < fragments.length; i = i + 0x1) {
            if(fragments[i] != null) {
                fragments[i].onActivityResult(requestCode, resultCode, data);
            }
        }
    }

    private void showAlertDialog(int name) {
        String msg = resource.getString(name);
        msg = msg.replace("{0}", resource.getString(R.string.mc_discuz_base_request_url));
        AlertDialog dialog = new AlertDialog.Builder(this).setMessage(msg).setPositiveButton(0x104000a, 0x0).create();
        dialog.setCanceledOnTouchOutside(false);
        dialog.show();
    }*/
}
